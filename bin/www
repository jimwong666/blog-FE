const app = require('../app');
const https = require('https');
const fs = require('fs');
const path = require('path');
const logger = require('../lib/logger');
const debug = require('debug')('app:server');

const privateCrt = fs.readFileSync(path.join(__dirname, 'https/1_paludina.com_bundle.crt'), 'utf8');
const privateKey = fs.readFileSync(path.join(__dirname, 'https/2_paludina.com.key'), 'utf8');
const HTTPS_OPTOIN = {
  key: privateKey,
  cert: privateCrt
};

const server = https.createServer(HTTPS_OPTOIN, app);
server.listen(app.get('port'), function() {
  logger.getLogger().info('Server unit ' + process.pid + ' listening on port ' + app.get('port'));
});

server.on('error', onError);
server.on('listening', onListening);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  let port = app.get('port');
  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
